Var header = {}
Var headerVal = concat("Bearer ", Env:accessToken)
Var:header.put("Authorization", Var:headerVal)

Var myEndTime = time-to-string(Env:endTimeMillis)
Var myStartTime = time-to-string(Env:startTimeMillis)
Var alignmentPeriod = "60s"
Var index = 0
Var tempList = []
Var one = 1
Var lengthOfItems = Env:filterList.length()
Var requests = []
Var emptySpace = ""
while Var:index !=  Var:lengthOfItems {
  Var params = {}
  Var:params.put("interval.startTime", Var:myStartTime)
  Var:params.put("interval.endTime", Var:myEndTime)
  Var:params.put("aggregation.alignmentPeriod", Var:alignmentPeriod)

  Var crossSeriesReducer = Env:crossSeriesReducerList[Var:index]
  Var perSeriesAligner = Env:perSeriesAlignerList[Var:index]
  Var filter = Env:filterList[Var:index]
  if Var:crossSeriesReducer != Var:emptySpace {
    Var:params.put("aggregation.crossSeriesReducer", Var:crossSeriesReducer)
  }
  if Var:perSeriesAligner != Var:emptySpace {
    Var:params.put("aggregation.perSeriesAligner", Var:perSeriesAligner)
  }
  Var:params.put("filter", Var:filter)

  Var url = concat(Env:baseUrl, Env:project, "/timeSeries")
  Var groupBys = Env:groupByFieldsList[Var:index]
  if Env:collectHostData == "true" {
    Var serviceInstanceField = Env:serviceInstanceFields[Var:index]
    Var:groupBys.append(Var:serviceInstanceField)
  }

  if Var:groupBys != Var:tempList {
    Var:params.put("aggregation.groupByFields", Var:groupBys)
  }


  Request metricRequest = new Request(url=Var:url, header=Var:header, options=Var:params)
  Var:requests.append(Var:metricRequest)
  index = Var:index + Var:one
}


Var metricResponses = execute-parallel(Var:requests)
Var returnList = []
index = 0
foreach metricResponse in Var:metricResponses {
  Var metricIdentifier =  Env:metricIdentifiers[Var:index]
  Var timeseriesList = extract(Var:metricResponse, $.timeSeries)
  foreach timeseries in Var:timeseriesList {
      Var metricName = extract(Var:timeseries, $.metric.type)
      Var txnName =  ""
      Var groupByResponses = Env:groupByResponseList.get(Var:metricName)
      if Var:groupByResponses != Var:tempList {
        foreach field in Var:groupByResponses {
          Var path = concat("$.", Var:field)
          Var extracted = extract(Var:timeseries, Var:path)
          txnName = concat(Var:txnName, Var:extracted)
        }
      }

      if Var:txnName == Var:emptySpace {
        txnName = concat(Var:metricName, "")
      }

      Var hostname = ""
      if Env:collectHostData == "true" {
        Var serviceInstanceResponseField = Env:serviceInstanceResponseFields[Var:index]
        Var serviceInstancePath = concat("$.", Var:serviceInstanceResponseField)
        hostname = extract(Var:timeseries, Var:serviceInstancePath)
        print Var:hostname
      }

      Var points = extract(Var:timeseries, $.points)
      foreach point in Var:points {
          Var val = extract(Var:point, $.value.doubleValue)
          Var timestamp = extract(Var:point, $.interval.endTime)
          Var timeStampVal = string-to-time(Var:timestamp)
          if Env:collectHostData != "true" {
              Var tsRecord = new TimeseriesRecord(txnName=Var:txnName, metricIdentifier=Var:metricIdentifier, metricName=Var:metricName, metricValue=Var:val, timestamp=Var:timeStampVal)
              Var:returnList.append(Var:tsRecord)
          }
          if Env:collectHostData == "true" {
            Var tsRecord = new TimeseriesRecord(txnName=Var:txnName, metricIdentifier=Var:metricIdentifier, metricName=Var:metricName, metricValue=Var:val, timestamp=Var:timeStampVal, host=Var:hostname)
            Var:returnList.append(Var:tsRecord)
          }
      }
  }
  index = Var:index + Var:one
}
return Var:returnList