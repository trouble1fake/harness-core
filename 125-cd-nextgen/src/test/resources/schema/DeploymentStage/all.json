{
  "type": "object",
  "required": [
    "identifier",
    "name",
    "type"
  ],
  "properties": {
    "description": {
      "type": "string"
    },
    "failureStrategies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FailureStrategyConfig"
      }
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
    },
    "name": {
      "type": "string",
      "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
    },
    "tags": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "type": {
      "type": "string",
      "enum": [
        "Deployment"
      ]
    },
    "variables": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/NumberNGVariable"
          },
          {
            "$ref": "#/definitions/SecretNGVariable"
          },
          {
            "$ref": "#/definitions/StringNGVariable"
          }
        ]
      }
    },
    "when": {
      "$ref": "#/definitions/StageWhenCondition"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "Deployment"
          }
        }
      },
      "then": {
        "properties": {
          "spec": {
            "$ref": "#/definitions/DeploymentStageConfig"
          }
        }
      }
    }
  ],
  "definitions": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactFile": {
      "type": "object",
      "required": [
        "artifactPathExpression",
        "name",
        "path"
      ],
      "properties": {
        "artifactPathExpression": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactListConfig": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "string"
        },
        "primary": {
          "$ref": "#/definitions/PrimaryArtifact"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SidecarArtifactWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ArtifactOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSets": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactoryFromYaml": {
      "type": "object",
      "required": [
        "artifactFile"
      ],
      "properties": {
        "artifactFile": {
          "$ref": "#/definitions/ArtifactFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactoryStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "artifacts",
            "connectorRef",
            "repositoryName"
          ],
          "properties": {
            "artifacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactoryFromYaml"
              }
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BitbucketStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CountInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "DeleteManifestPathSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "allManifestPaths": {
              "type": "boolean"
            },
            "manifestPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteReleaseNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "deleteNamespace": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourceNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "resourceNames"
          ],
          "properties": {
            "resourceNames": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ],
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ResourceName",
            "ReleaseName",
            "ManifestPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ManifestPath"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteManifestPathSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ReleaseName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteReleaseNameSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ResourceName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeleteResourceNameSpec"
              }
            }
          }
        }
      ]
    },
    "DeploymentStageConfig": {
      "type": "object",
      "required": [
        "execution",
        "infrastructure",
        "serviceConfig"
      ],
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        },
        "infrastructure": {
          "$ref": "#/definitions/PipelineInfrastructure"
        },
        "serviceConfig": {
          "$ref": "#/definitions/ServiceConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeploymentStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "$ref": "#/definitions/StageWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Deployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DeploymentStageConfig"
              }
            }
          }
        }
      ]
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerHubArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "PreProduction",
            "Production"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "ManualIntervention"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "registryHostname"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "registryHostname": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcsStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitLabStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GithubStore": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "approvalMessage",
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string"
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmChartManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "chartName": {
              "type": "string"
            },
            "chartVersion": {
              "type": "string"
            },
            "commandFlags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HelmManifestCommandFlag"
              }
            },
            "helmVersion": {
              "type": "string",
              "enum": [
                "V2",
                "V3"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmManifestCommandFlag": {
      "type": "object",
      "required": [
        "commandType"
      ],
      "properties": {
        "commandType": {
          "type": "string",
          "enum": [
            "Fetch",
            "Template",
            "Pull",
            "Install",
            "Upgrade",
            "Rollback",
            "History",
            "Delete",
            "Uninstall",
            "List"
          ]
        },
        "flag": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HoldingScope": {
      "type": "object",
      "required": [
        "nodeSetupId",
        "scope"
      ],
      "properties": {
        "nodeSetupId": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraOverrides": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "overrides": {
          "$ref": "#/definitions/InfraOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfrastructureDef": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "provisioner": {
          "$ref": "#/definitions/ExecutionElementConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect",
            "KubernetesGcp"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesDirect"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8SDirectInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesGcp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sGcpInfrastructure"
              }
            }
          }
        }
      ]
    },
    "InlineTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionBase": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Count",
            "Percentage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/CountInstanceSelection"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/PercentageInstanceSelection"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8SDirectInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "filePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sBGSwapServicesStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "skipDryRun": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sBlueGreenStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skipDryRun": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sCanaryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deleteResources"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "deleteResources": {
              "$ref": "#/definitions/DeleteResourcesWrapper"
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sGcpInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "namespace": {
              "type": "string",
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sRollingStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sScaleStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection",
            "workload"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/InstanceSelectionWrapper"
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "workload": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KubernetesServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizeManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "pluginPath": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizePatchesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestAttributes": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestConfig": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HelmChart",
            "K8sManifest",
            "Kustomize",
            "KustomizePatches",
            "OpenshiftParam",
            "OpenshiftTemplate",
            "Values"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmChart"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmChartManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kustomize"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KustomizeManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KustomizePatches"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KustomizePatchesManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftParam"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OpenshiftParamManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftTemplate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/OpenshiftManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Values"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ValuesManifest"
              }
            }
          }
        }
      ]
    },
    "ManifestConfigWrapper": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/ManifestConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/ManifestOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/NGVariableOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NativeHelmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            {
              "$ref": "#/definitions/AbortFailureActionConfig"
            },
            {
              "$ref": "#/definitions/IgnoreFailureActionConfig"
            },
            {
              "$ref": "#/definitions/ManualInterventionFailureActionConfig"
            },
            {
              "$ref": "#/definitions/MarkAsSuccessFailureActionConfig"
            },
            {
              "$ref": "#/definitions/RetryFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StageRollbackFailureActionConfig"
            },
            {
              "$ref": "#/definitions/StepGroupFailureActionConfig"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftParamManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": [
        "sections"
      ],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PercentageInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "percentage": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineInfrastructure": {
      "type": "object",
      "properties": {
        "allowSimultaneousDeployments": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentYaml"
        },
        "environmentRef": {
          "type": "string"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/InfrastructureDef"
        },
        "infrastructureKey": {
          "type": "string"
        },
        "useFromStage": {
          "$ref": "#/definitions/InfraUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "infrastructureDefinition"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "environment"
              ]
            },
            {
              "required": [
                "environmentRef"
              ]
            }
          ]
        }
      ]
    },
    "PrimaryArtifact": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcrArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "RemoteTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "acquireMode",
            "holdingScope",
            "name",
            "permits",
            "resourceUnit"
          ],
          "properties": {
            "acquireMode": {
              "type": "string",
              "enum": [
                "ENSURE",
                "ACCUMULATE"
              ]
            },
            "holdingScope": {
              "$ref": "#/definitions/HoldingScope"
            },
            "name": {
              "type": "string"
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "resourceUnit": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3StoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceConfig": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/ServiceYaml"
        },
        "serviceDefinition": {
          "$ref": "#/definitions/ServiceDefinition"
        },
        "serviceRef": {
          "type": "string"
        },
        "stageOverrides": {
          "$ref": "#/definitions/StageOverridesConfig"
        },
        "useFromStage": {
          "$ref": "#/definitions/ServiceUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "serviceDefinition"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "service"
              ]
            },
            {
              "required": [
                "serviceRef"
              ]
            }
          ]
        }
      ]
    },
    "ServiceDefinition": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Kubernetes",
            "NativeHelm"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kubernetes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/KubernetesServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NativeHelm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/NativeHelmServiceSpec"
              }
            }
          }
        }
      ]
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceOverrides": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "artifactOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactOverrideSetWrapper"
          }
        },
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "manifestOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestOverrideSetWrapper"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        },
        "variableOverrideSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariableOverrideSetWrapper"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/ServiceOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SidecarArtifact": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcrArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "SidecarArtifactWrapper": {
      "type": "object",
      "properties": {
        "sidecar": {
          "$ref": "#/definitions/SidecarArtifact"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageOverridesConfig": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/ArtifactListConfig"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManifestConfigWrapper"
          }
        },
        "useArtifactOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useManifestOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useVariableOverrideSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
        },
        "type": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Barrier"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/BarrierStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "FlagConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/FlagConfigurationStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HarnessApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HarnessApprovalStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmDeployStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HelmRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HttpStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JiraApprovalStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JiraCreateStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/JiraUpdateStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sApplyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBGSwapServices"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sBGSwapServicesStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBlueGreenDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sBlueGreenStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sCanaryDeleteStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sCanaryStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sDeleteStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sRollingStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sRollingRollbackStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sScale"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/K8sScaleStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ServiceNowApprovalStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ShellScriptStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformApplyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformDestroyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformPlan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformPlanStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/TerraformRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "steps"
      ],
      "properties": {
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfigWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Git",
            "Github",
            "Bitbucket",
            "GitLab",
            "Http",
            "S3",
            "Gcs",
            "Artifactory"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Artifactory"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ArtifactoryStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bitbucket"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/BitbucketStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcs"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GcsStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Git"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GitStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitLab"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GitLabStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Github"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/GithubStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/HttpStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/S3StoreConfig"
              }
            }
          }
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerraformBackendConfigSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformBackendConfigSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformConfigFilesWrapper": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "$ref": "#/definitions/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformDestroyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformExecutionData": {
      "type": "object",
      "required": [
        "configFiles"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles",
        "secretManagerRef"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/TerraformBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/StringNGVariable"
              }
            ]
          }
        },
        "secretManagerRef": {
          "type": "string"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/TerraformPlanExecutionData"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformStepConfiguration": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/TerraformExecutionData"
        },
        "type": {
          "type": "string",
          "enum": [
            "Inline",
            "InheritFromPlan",
            "InheritFromApply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/InlineTerraformVarFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/RemoteTerraformVarFileSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFileWrapper": {
      "type": "object",
      "required": [
        "varFile"
      ],
      "properties": {
        "varFile": {
          "$ref": "#/definitions/TerraformVarFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ValuesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
}